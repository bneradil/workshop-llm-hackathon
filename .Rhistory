ls
rnorm(15,3)
rnorm(15)
setwd("~/github/workshop-llm-hackathon")
usethis::edit_r_environ()
library(ellmer)
chat <- chat_anthropic()
chat <- chat_gemini("You are a terse assistant.")
client$chat("What is the capital of France?")
chat <- chat_google_gemini("You are a terse assistant.")
client$chat("What is the capital of France?")
client <- chat_google_gemini("You are a terse assistant.")
client$chat("What is the capital of France?")
# the client is stateful, so this continues the conversation
client$chat("What is its most famous landmark?")
# While you wait
live_browser(client)
client
client$chat("What is its most famous street?")
client
options(httr2_verbosity = 2)
chat <- chat_anthropic("You are a terse assistant.", echo = FALSE)
chat$chat("Tell me a joke about a statistician and a data scientist")
chat$chat("Explain why that's funny")
chat$chat("Make the joke funnier")
chat$chat("Explain why that is funnier")
# tool calling
options(httr2_verbosity = 0)
chat <- chat_anthropic("You're a terse assistant")
chat$chat("What's today's date?")
#> Today is November 24, 2023.
chat$register_tool(tool(
function() Sys.Date(),
"Gets the current date",
.name = "today"
))
chat$chat("What's today's date?")
chat
chat <- chat_anthropic()
chat$chat("How old is Cher? Explain your working")
chat$register_tool(tool(
function() Sys.Date(),
"Gets the current date",
.name = "today"
))
chat$chat("How old is Cher? Explain your working")
chat <- chat_anthropic()
chat$register_tool(tool(
function() Sys.Date(),
"Gets the current date",
.name = "today"
))
chat$chat("How old is Cher? Use the today tool for your calculation. Explain your working")
library(ellmer)
play_sound <- function(sound = c("correct", "incorrect", "you-win")) {
sound <- match.arg(sound)
if (sound == "correct") {
beepr::beep("coin")
} else if (sound == "incorrect") {
beepr::beep("wilhelm")
} else if (sound == "you-win") {
beepr::beep("fanfare")
}
NULL
}
prompt <- "
You're hosting a quiz game show.
* Before you start, ask the user to choose a theme.
* Ask simple questions and ask the user to answer them via multiple choice.
* Format your responses with markdown.
* After the user answers, provide feedback and then move on to the next question.
* After every 5 questions, declare the user to be a winner regardless of their
score, lavish them with praise, and start the game over.
* Using the `play_sound()` tool, play sound effects for each answer, and
when the user 'wins'.
"
client <- chat_anthropic(
model = "claude-sonnet-4-20250514",
system_prompt = prompt
)
client$register_tool(tool(
play_sound,
"Plays a sound effect.",
sound = type_enum(
"Which sound effect to play.",
c("correct", "incorrect", "you-win")
)
))
client$chat("Begin", echo = TRUE) # Jump-start the conversation
live_browser(client, quiet = TRUE) # Continue the conversation
install.packages("beepr")
play_sound <- function(sound = c("correct", "incorrect", "you-win")) {
sound <- match.arg(sound)
if (sound == "correct") {
beepr::beep("coin")
} else if (sound == "incorrect") {
beepr::beep("wilhelm")
} else if (sound == "you-win") {
beepr::beep("fanfare")
}
NULL
}
prompt <- "
You're hosting a quiz game show.
* Before you start, ask the user to choose a theme.
* Ask simple questions and ask the user to answer them via multiple choice.
* Format your responses with markdown.
* After the user answers, provide feedback and then move on to the next question.
* After every 5 questions, declare the user to be a winner regardless of their
score, lavish them with praise, and start the game over.
* Using the `play_sound()` tool, play sound effects for each answer, and
when the user 'wins'.
"
client <- chat_anthropic(
model = "claude-sonnet-4-20250514",
system_prompt = prompt
)
client$register_tool(tool(
play_sound,
"Plays a sound effect.",
sound = type_enum(
"Which sound effect to play.",
c("correct", "incorrect", "you-win")
)
))
client$chat("Begin", echo = TRUE) # Jump-start the conversation
live_browser(client, quiet = TRUE) # Continue the conversation
prompts <- list(
"I go by Alex. 42 years on this planet and counting.",
"Pleased to meet you! I'm Jamal, age 27.",
"They call me Li Wei. Nineteen years young.",
"Fatima here. Just celebrated my 35th birthday last week.",
"The name's Robert - 51 years old and proud of it.",
"Kwame here - just hit the big 5-0 this year."
)
type_person <- type_object(name = type_string(), age = type_number())
chat <- chat_anthropic()
parallel_chat_structured(chat, prompts, type_person)
recipe <- "
In a large bowl, cream together 1 cup of softened unsalted butter and ½ cup
of white sugar until smooth. Beat in 1 egg and 1 teaspoon of vanilla extract.
Gradually stir in 2 cups of all-purpose flour until the dough forms. Finally,
fold in 1 cup of semisweet chocolate chips. Drop spoonfuls of dough onto an
ungreased baking sheet and bake at 350°F (175°C) for 10-12 minutes, or until
the edges are lightly browned. Let the cookies cool on the baking sheet for
a few minutes before transferring to a wire rack to cool completely. Enjoy!
"
# Just instructions -----------------------------------------------------------
# I find this most useful for brainstorming
chat <- chat_anthropic("
The user input contains a recipe. Extract a list of ingredients and
return it in JSON format."
)
chat$chat(recipe)
chat$chat("Break down the ingredients into finer detail")
chat$chat("EVEN FINER")
chat$chat("EVEN FINER!!!")
chat <- chat_anthropic(r'(
The user input contains a recipe. Extract a list of ingredients and return
it in JSON format.
Example Output:
```json
[
{ "item": "Flour", "quantity": 1, "unit": "cup" },
{ "item": "Vegetable oil", "quantity": 0.5, "unit": "tsp" },
{ "item": "Onion", "quantity": 1, "unit": null },
]
```)'
)
chat$chat(recipe)
# Use $extract_data() ---------------------------------------------------------
type_ingredients <- type_array(items = type_object(
ingredient = type_string(),
quantity = type_number(),
unit = type_string(required = FALSE)
))
chat <- chat_anthropic("
The user input contains a recipe. Extract a list of ingredients
")
chat$extract_data(recipe, type = type_ingredients)
chat$chat_structured(recipe, type = type_ingredients)
chat <- chat_anthropic()
chat$chat(
content_image_file("holly-mandarich-3p9zaNwUtv8-unsplash.jpg"),
"Describe this photo"
)
?interpolate_file
library(ellmer)
iris_glimpse <- paste0(capture.output(dplyr::glimpse(iris)), collapse = "\n")
diamonds_glimpse <- paste0(capture.output(dplyr::glimpse(ggplot2::diamonds)), collapse = "\n")
install.packages("ggplot2")
iris_glimpse <- paste0(capture.output(dplyr::glimpse(iris)), collapse = "\n")
diamonds_glimpse <- paste0(capture.output(dplyr::glimpse(ggplot2::diamonds)), collapse = "\n")
prompt <- interpolate_file("ggplot2-prompt.md", glimpse = diamonds_glimpse)
chat <- chat_anthropic()
chat$chat(prompt)
prompt <- interpolate_file("ggplot2-prompt.md", glimpse = diamonds_glimpse)
chat <- chat_anthropic()
chat$chat(prompt)
prompt <- interpolate_file("ggplot2-prompt.md", glimpse = diamonds_glimpse)
chat <- chat_anthropic()
chat$chat(prompt)
prompt <- interpolate_file("ggplot2-prompt.md", glimpse = diamonds_glimpse)
chat <- chat_anthropic()
chat$chat(prompt)
prompt <- interpolate_file("ggplot2-prompt.md", glimpse = diamonds_glimpse)
chat <- chat_anthropic()
chat$chat(prompt)
